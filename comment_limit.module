<?php

/**
 * @file
 * Contains comment_limit.module..
 */

use Drupal\comment\Entity\Comment;
use Drupal\comment_limit\CommentLimitQuery;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function comment_limit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the comment_limit module.
    case 'help.page.comment_limit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Limits comments per node type') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_limit_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var CommentForm $comment */
  $comment = $form_state->getFormObject()->getEntity();
  $field_type = $comment->getFieldStorageDefinition()->getType();
  if ($field_type == 'comment') {
    $form['edit-limit-per-user'] = [
      '#type' => 'number',
      '#title' => 'Comment limit per user',
      '#weight' => 1,
      '#min' => '0',
      '#max' => '1000',
      '#default_value' => $comment->getThirdPartySetting('comment_limit', 'edit-limit-per-user', FALSE),
    ];
    $form['edit-limit-per-node'] = [
      '#type' => 'number',
      '#title' => 'Comment limit per node',
      '#weight' => 1,
      '#min' => '0',
      '#max' => '10000',
      '#default_value' => $comment->getThirdPartySetting('comment_limit', 'edit-limit-per-node', FALSE),
    ];

    $form['#entity_builders'][] = 'comment_limit_form_field_edit_form_add_form_builder';
  }
}

/**
 * Formbuilder.
 */
function comment_limit_form_field_edit_form_add_form_builder($entity_type, FieldConfig $comment, &$form, FormStateInterface $form_state) {
  $comment->setThirdPartySetting('comment_limit', 'edit-limit-per-user', $form_state->getValue('edit-limit-per-user'));
  $comment->setThirdPartySetting('comment_limit', 'edit-limit-per-node', $form_state->getValue('edit-limit-per-node'));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function comment_limit_preprocess_node(&$variables) {
  if (in_array('node-max', $_SESSION['messages']['status']) && in_array('user-max', $_SESSION['messages']['status'])) {
    drupal_get_messages('status', TRUE);
    drupal_set_message(t('The comment limit for this node has been reached!'));
    drupal_set_message(t('Your comment limit has been reached!'));
  }
  elseif (in_array('node-max', $_SESSION['messages']['status'])) {
    drupal_get_messages('status', TRUE);
    drupal_set_message(t('The comment limit for this node has been reached!'));
  }
  elseif (in_array('user-max', $_SESSION['messages']['status'])) {
    drupal_get_messages('status', TRUE);
    drupal_set_message(t('Your comment limit has been reached!'));
  }
}

/**
 * Implements hook_entity_insert().
 */
function comment_limit_comment_insert(Comment $comment) {
  // General variables.
  $entity_type = $comment->getCommentedEntityTypeId();
  $entity_id = $comment->getCommentedEntityId();
  $node = Node::load($comment->getCommentedEntityId());
  $user = Drupal::currentUser();
  $bundle = $node->getType();
  $comment_type = FieldConfig::load($entity_type . '.' . $bundle . '.comment');
  $commentQuery = new CommentLimitQuery($entity_id, $user);
  // User limit related variables.
  $maxCommmentUser = $comment_type->getThirdPartySetting('comment_limit', 'edit-limit-per-user', FALSE) + 1;
  $currentCommentUser = $commentQuery->comment_limit_get_user();
  // Node limit related variables.
  $maxCommentNode = $comment_type->getThirdPartySetting('comment_limit', 'edit-limit-per-node', FALSE) + 1;
  $currentCommentNode = $commentQuery->comment_limit_get_node();

  if ($maxCommentNode) {
    if ($maxCommentNode <= $currentCommentNode && !$user->hasPermission('bypass comment limit')) {
      $comment->delete();
      drupal_set_message('node-max');
    }
  }
  if ($maxCommmentUser) {
    if ($maxCommmentUser <= $currentCommentUser && !$user->hasPermission('bypass comment limit')) {
      $comment->delete();
      drupal_set_message('user-max');
    }
  }
}
