<?php

/**
 * @file
 * Contains comment_limit.module..
 */

use Drupal\comment_limit\CommentLimitQuery;
use Drupal\Core\Entity\Entity;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function comment_limit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the comment_limit module.
    case 'help.page.comment_limit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Limits comments per node type') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_limit_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var CommentForm $comment */
  $comment = $form_state->getFormObject()->getEntity();
  $field_type = $comment->getFieldStorageDefinition()->getType();
  if ($field_type == 'comment') {
    $form['edit-limit-per-user'] = [
      '#type' => 'number',
      '#title' => 'Comment limit per user',
      '#weight' => 1,
      '#min' => '0',
      '#max' => '1000',
      '#default_value' => $comment->getThirdPartySetting('comment_limit', 'edit-limit-per-user', FALSE),
    ];
    $form['edit-limit-per-node'] = [
      '#type' => 'number',
      '#title' => 'Comment limit per node',
      '#weight' => 1,
      '#min' => '0',
      '#max' => '10000',
      '#default_value' => $comment->getThirdPartySetting('comment_limit', 'edit-limit-per-node', FALSE),
    ];

    $form['#entity_builders'][] = 'comment_limit_form_field_edit_form_add_form_builder';
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_limit_form_comment_form_alter(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  // General variables.
  $maxCommentNodeReached = FALSE;
  $entity_type = $entity->getCommentedEntityTypeId();
  $entity_id = $entity->getCommentedEntityId();
  $commented_entity = Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
  $user = Drupal::currentUser();
  $bundle = $commented_entity->bundle();
  $comment_type = FieldConfig::load($entity_type . '.' . $bundle . '.comment');
  $commentQuery = Drupal::service('comment_limit.get_limit');
  // User limit related variables.
  $maxCommmentUser = $comment_type->getThirdPartySetting('comment_limit', 'edit-limit-per-user', FALSE);
  $currentCommentUser = $commentQuery->getUserLimit($entity_id);
  // Node limit related variables.
  $maxCommentNode = $comment_type->getThirdPartySetting('comment_limit', 'edit-limit-per-node', FALSE);
  $currentCommentNode = $commentQuery->getEntityLimit($entity_id);

  if ($maxCommentNode) {
    if ($maxCommentNode <= $currentCommentNode && !$user->hasPermission('bypass comment limit')) {
      $form = [];
      $form['errorNode'] = [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('The comment limit for this @entity was reached', ['@entity' => $entity_type]),
      ];
      $maxCommentNodeReached = TRUE;
    }
  }
  if ($maxCommmentUser) {
    if ($maxCommmentUser <= $currentCommentUser && !$user->hasPermission('bypass comment limit')) {
      if ($maxCommentNodeReached == FALSE) {
        $form = [];
      }
      $form['errorUser'] = [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('You have reached your comment limit for this @entity', ['@entity' => $entity_type]),
      ];
    }
  }
}

/**
 * Formbuilder.
 */
function comment_limit_form_field_edit_form_add_form_builder($entity_type, FieldConfig $comment, &$form, FormStateInterface $form_state) {
  $comment->setThirdPartySetting('comment_limit', 'edit-limit-per-user', $form_state->getValue('edit-limit-per-user'));
  $comment->setThirdPartySetting('comment_limit', 'edit-limit-per-node', $form_state->getValue('edit-limit-per-node'));
}

