<?php

/**
 * @file
 * Contains comment_limit.module..
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\TypedData\DataDefinition;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function comment_limit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the comment_limit module.
    case 'help.page.comment_limit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Limits comments per field or user') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_limit_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $comment = $form_state->getFormObject()->getEntity();
  $field_type = $comment->getFieldStorageDefinition()->getType();
  if ($field_type == 'comment') {
    $form['comment_limit'] = [
      '#type' => 'fieldset',
      '#title' => 'Comment limit',
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'user_limit', 0) == NULL) {
      $default_user = '0';
    }
    else {
      $default_user = $comment->getThirdPartySetting('comment_limit', 'user_limit', 0);
    }
    $form['comment_limit']['user_limit'] = [
      '#type' => 'number',
      '#title' => 'User limit',
      '#description' => t('The maximum number of comments per user on this entity, e.g. 2 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_user,
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'field_limit', 0) == NULL) {
      $default_entity = '0';
    }
    else {
      $default_entity = $comment->getThirdPartySetting('comment_limit', 'field_limit', 0);
    }
    $form['comment_limit']['field_limit'] = [
      '#type' => 'number',
      '#title' => 'Field limit',
      '#description' => t('The maximum number of comments for this field, e.g. 10 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_entity,
    ];

    $form['#entity_builders'][] = 'comment_limit_form_field_edit_form_add_form_builder';
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_limit_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'comment-form') {
    $comment = $form_state->getFormObject()->getEntity();
    $comment_limit = Drupal::service('comment_limit.service');
    $form_action = explode('/', $form['#action']);
    $last_key = count($form_action) - 1;
    $field_name = $form_action[$last_key];
    $entity_id = $comment->getCommentedEntityId();
    $entity_type = $comment->getCommentedEntityTypeId();
    $entity = Drupal::entityTypeManager()
      ->getStorage($entity_type)
      ->load($entity_id);
    $entity_bundle = $entity->bundle();
    $field_config = FieldConfig::loadByName($entity_type, $entity_bundle, $field_name);
    $field_id = $field_config->id();
    $field_label = $field_config->getLabel();    
    $definitions = DataDefinition::create('any')
      ->addConstraint('CommentFormConstraint', [
        'entityId' => $entity_id,
        'entityType' => $entity_type,
        'fieldId' => $field_id,
        'fieldName' => $field_name,
      ]);
    $typed_data = Drupal::typedDataManager()->create($definitions);
    $violations = $typed_data->validate();

    if ($violations->count() > 0) {
      $form = [];
      $form[$field_name] = [
        '#type' => 'html_tag',
        '#tag' => 'b',
        '#value' => $comment_limit->getMessage($entity_id, $entity_type, $field_name, $field_id, $field_label),
      ];
    }
  }
}

/**
 * Custom formbuilder for field config form.
 *
 * @param string $entity_type
 *    The entity type.
 * @param FieldConfig $comment
 *    The FieldConfig object of the comment entity.
 * @param FormStateInterface $form_state
 *    The form values from the field config form.
 */
function comment_limit_form_field_edit_form_add_form_builder($entity_type, FieldConfig $comment, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('user_limit') == NULL) {
    $form_state->setValue('user_limit', '0');
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'user_limit', $form_state->getValue('user_limit'));
  }
  if ($form_state->getValue('field_limit') == NULL) {
    $form_state->setValue('field_limit', '0');
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'field_limit', $form_state->getValue('field_limit'));
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function comment_limit_entity_extra_field_info() {
  $fields = [];
  $entities = [];
  $entity_ids = [];
  $comment_limit = Drupal::service('comment_limit.service');
  $types = $comment_limit->getAllEntityTypes();
  foreach ($types as $type) {
    $entities[$type] = Drupal::entityTypeManager()
      ->getStorage($type)
      ->loadMultiple();
    $entity_ids[$type] = array_keys($entities[$type]);
    foreach ($entity_ids[$type] as $id) {
      $entity = Drupal::entityTypeManager()
        ->getStorage($type)
        ->load($id);
      $entity_fields = $entity->getFieldDefinitions();
      foreach ($entity_fields as $entity_field) {
        if ($entity_field->getType() == 'comment') {
          $fields[$type][$entity->bundle()] = [
            'display' => [
              'field_limit' => [
                'label' => t('Field limit status'),
                'description' => t('Shows the limit status of the field'),
                'weight' => 0,
                'visible' => TRUE,
              ],
              'user_limit' => [
                'label' => t('User limit status'),
                'description' => t('Shows the limit status of the user'),
                'weight' => 0,
                'visible' => TRUE,
              ],
            ],
          ];
        }
      }
    }
  }
  return $fields;
}

/**
 * Implements hook_entity_view().
 */
function comment_limit_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $fields = $entity->getFieldDefinitions();

  foreach ($fields as $delta => $field) {
    if ($field->getType() == 'comment') {
      $comment_limit = Drupal::service('comment_limit.service');
      $entity_id = $entity->id();
      $entity_type = $entity->getEntityTypeId();
      $field_name = $field->getName();
      $field_id = $field->id();
      $field_label = $field->getLabel();
      $field_limit = $comment_limit->getFieldLimit($field_id);
      $user_limit = $comment_limit->getUserLimit($field_id);
      $field_current = $comment_limit->getCurrentCommentsOnField($entity_id, $entity_type, $field_name);
      $user_current = $comment_limit->getCurrentCommentCountForUser($entity_id, $entity_type);
      if ($display->getComponent('field_limit')) {
        $build[$delta . 'field_limit'] = [
          '#type' => 'item',
          '#markup' => '<b>' . t('The comment field "%field" is generally limited to a maximum of %maximum comments, %count have already been posted.', [
            '%field' => $field_label,
            '%maximum' => $field_limit,
            '%count' => $field_current,
          ]) . '</b>',
        ];
      }
      if ($display->getComponent('user_limit')) {
        $build[$delta . 'user_limit'] = [
          '#type' => 'item',
          '#markup' => '<b>' . t('You may post a maximum of %maximum comments for the comment field "%field", having %count already posted', [
            '%field' => $field_label,
            '%maximum' => $user_limit,
            '%count' => $user_current,
          ]) . '</b>',
        ];
      }
    }
  }
}
