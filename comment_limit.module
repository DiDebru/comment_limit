<?php

/**
 * @file
 * Contains comment_limit.module..
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\TypedData\DataDefinition;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function comment_limit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the comment_limit module.
    case 'help.page.comment_limit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Limits comments per node type') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_limit_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $comment = $form_state->getFormObject()->getEntity();
  $field_type = $comment->getFieldStorageDefinition()->getType();
  if ($field_type == 'comment') {
    $form['comment_limit'] = [
      '#type' => 'fieldset',
      '#title' => 'Comment limit',
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'user_limit', FALSE) == NULL) {
      $default_user = '0';
    }
    else {
      $default_user = $comment->getThirdPartySetting('comment_limit', 'user_limit', FALSE);
    }
    $form['comment_limit']['user_limit'] = [
      '#type' => 'number',
      '#title' => 'User limit',
      '#description' => t('The maximum number of comments per user on this entity, e.g. 2 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_user,
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'entity_limit', FALSE) == NULL) {
      $default_entity = '0';
    }
    else {
      $default_entity = $comment->getThirdPartySetting('comment_limit', 'entity_limit', FALSE);
    }
    $form['comment_limit']['entity_limit'] = [
      '#type' => 'number',
      '#title' => 'Entity limit',
      '#description' => t('The maximum number of comments on this entity, e.g. 10 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_entity,
    ];

    $form['#entity_builders'][] = 'comment_limit_form_field_edit_form_add_form_builder';
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_limit_form_comment_form_alter(&$form, FormStateInterface $form_state) {
  $comment = $form_state->getFormObject()->getEntity();
  $entity_id = $comment->getCommentedEntityId();
  $entity_type = $comment->getCommentedEntityTypeId();
  $entity = Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
  $bundle = $entity->bundle();
  $definitions = DataDefinition::create('boolean')
    ->addConstraint('CommentFormConstraint', [
      'entityId' => $entity_id,
      'entityType' => $entity_type,
      'bundle' => $bundle,
    ]);
  $typed_data = Drupal::typedDataManager()->create($definitions);
  $violations = $typed_data->validate();

  if ($violations->count() > 0) {
    $form = [];
    $form['error_node'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => $violations->get(0),
    ];
  }

}

/**
 * Custom formbuilder for field config form.
 *
 * @param string $entity_type
 *    The entity type.
 * @param FieldConfig $comment
 *    The FieldConfig object of the comment entity.
 * @param FormStateInterface $form_state
 *    The form values from the field config form.
 */
function comment_limit_form_field_edit_form_add_form_builder($entity_type, FieldConfig $comment, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('user_limit') == '0') {
    $form_state->setValue('user_limit', NULL);
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'user_limit', $form_state->getValue('user_limit'));
  }
  if ($form_state->getValue('entity_limit') == '0') {
    $form_state->setValue('entity_limit', NULL);
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'entity_limit', $form_state->getValue('entity_limit'));
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function comment_limit_entity_extra_field_info() {
  $fields = [];
  $entities = [];
  $entity_ids = [];
  $comment_limit = Drupal::service('comment_limit.service');
  $types = $comment_limit->getAllEntityTypes();
  foreach ($types as $type) {
    $entities[$type] = Drupal::entityTypeManager()
      ->getStorage($type)
      ->loadMultiple();
    $entity_ids[$type] = array_keys($entities[$type]);
    foreach ($entity_ids[$type] as $id) {
      $entity = Drupal::entityTypeManager()
        ->getStorage($type)
        ->load($id);
      if ($entity->hasField('comment')) {
        $fields[$type][$entity->bundle()] = [
          'display' => [
            'entity_limit' => [
              'label' => t('Entity limit status.'),
              'description' => t('Shows the limit status of the entity'),
              'weight' => 0,
              'visible' => TRUE,
            ],
            'user_limit' => [
              'label' => t('User limit status.'),
              'description' => t('Shows the limit status of the user'),
              'weight' => 0,
              'visible' => TRUE,
            ],
          ],
        ];
      }
    }
  }
  return $fields;
}

/**
 * Implements hook_entity_view().
 */
function comment_limit_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->hasField('comment')) {
    $comment_limit = Drupal::service('comment_limit.service');
    $entity_id = $entity->id();
    $entity_type = $entity->getEntityTypeId();
    $entity_limit = $comment_limit->getEntityLimit($entity_id, $entity_type);
    $user_limit = $comment_limit->getUserLimit($entity_id, $entity_type);
    $entity_current = $comment_limit->getCurrentCommentsOnEntity($entity_id, $entity_type);
    $user_current = $comment_limit->getCurrentCommentCountForUser($entity_id, $entity_type);
    if (!$comment_limit->hasEntityLimitReached($entity_id, $entity_type)) {
      if ($display->getComponent('entity_limit')) {
        $build['entity_limit'] = [
          '#type' => 'item',
          '#markup' => '<b>' . t('This %entity_bundle is generally limited to a maximum of %maximum comments, %count have already been posted.', [
            '%entity_bundle' => $entity->bundle(),
            '%maximum' => $entity_limit,
            '%count' => $entity_current,
          ]) . '</b>',
        ];
      }
      if (!$comment_limit->hasUserLimitReached($entity_id, $entity_type)) {
        if ($display->getComponent('user_limit')) {
          $build['user_limit'] = [
            '#type' => 'item',
            '#markup' => '<b>' . t('You may post a maximum of %maximum comments on this %entity_bundle, having %count already posted', [
              '%entity_bundle' => $entity->bundle(),
              '%maximum' => $user_limit,
              '%count' => $user_current,
            ]) . '</b>',
          ];
        }
      }
    }
  }
}
