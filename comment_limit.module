<?php

/**
 * @file
 * Contains comment_limit.module..
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function comment_limit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the comment_limit module.
    case 'help.page.comment_limit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Limits comments per node type') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_limit_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $comment = $form_state->getFormObject()->getEntity();
  $field_type = $comment->getFieldStorageDefinition()->getType();
  if ($field_type == 'comment') {
    $form['comment_limit'] = [
      '#type' => 'fieldset',
      '#title' => 'Comment limit'
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'user_limit', FALSE) == NULL) {
      $default_user = '0';
    }
    else {
      $default_user = $comment->getThirdPartySetting('comment_limit', 'user_limit', FALSE);
    }
    $form['comment_limit']['user_limit'] = [
      '#type' => 'number',
      '#title' => 'User limit',
      '#description' => t('The maximum number of comments per user on this entity, e.g. 2 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_user,
    ];
    if ($comment->getThirdPartySetting('comment_limit', 'entity_limit', FALSE) == NULL) {
      $default_entity = '0';
    }
    else {
      $default_entity = $comment->getThirdPartySetting('comment_limit', 'entity_limit', FALSE);
    }
    $form['comment_limit']['entity_limit'] = [
      '#type' => 'number',
      '#title' => 'Entity limit',
      '#description' => t('The maximum number of comments on this entity, e.g. 10 or 0 for no limit'),
      '#weight' => 1,
      '#min' => '0',
      '#default_value' => $default_entity,
    ];

    $form['#entity_builders'][] = 'comment_limit_form_field_edit_form_add_form_builder';
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_limit_form_comment_form_alter(&$form, FormStateInterface $form_state) {
  $comment = $form_state->getFormObject()->getEntity();
  $max_comment_entity_reached = FALSE;
  $entity_type = $comment->getCommentedEntityTypeId();
  $entity_id = $comment->getCommentedEntityId();
  $comment_limit = Drupal::service('comment_limit.service');
  if ($comment_limit->getEntityLimit($entity_id, $entity_type)) {
    if ($comment_limit->hasEntityLimitReached($entity_id, $entity_type)) {
      $form = [];
      $form['error_node'] = [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('The comment limit for this @entity was reached', ['@entity' => $entity_type]),
      ];
      $max_comment_entity_reached = TRUE;
    }
  }
  if ($comment_limit->getUserLimit($entity_id, $entity_type)) {
    if ($comment_limit->hasUserLimitReached($entity_id, $entity_type)) {
      if ($max_comment_entity_reached == FALSE) {
        $form = [];
      }
      $form['error_user'] = [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('You have reached your comment limit for this @entity', ['@entity' => $entity_type]),
      ];
    }
  }
}

/**
 * Custom formbuilder for field config form.
 *
 * @param string $entity_type
 *    The entity type.
 * @param FieldConfig $comment
 *    The FieldConfig object of the comment entity.
 * @param FormStateInterface $form_state
 *    The form values from the field config form.
 */
function comment_limit_form_field_edit_form_add_form_builder($entity_type, FieldConfig $comment, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('user_limit') == '0') {
   $form_state->setValue('user_limit', NULL);
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'user_limit', $form_state->getValue('user_limit'));
  }
  if ($form_state->getValue('entity_limit') == '0') {
    $form_state->setValue('entity_limit', NULL);
  }
  else {
    $comment->setThirdPartySetting('comment_limit', 'entity_limit', $form_state->getValue('entity_limit'));
  }
}
